@model WebApplication1.Models.Order

@{
    ViewBag.Title = "修改訂單";
    List<int> productidlist = new List<int>();
}

<h4>修改訂單</h4>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.OrderId)

        <div class="form-group">
            @Html.LabelFor(model => model.CustName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustId")
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("EmpId")

            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Orderdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Orderdate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.Orderdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RequiredDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RequiredDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.RequiredDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShippedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShippedDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.ShippedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipperName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ShipperId")
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Freight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Freight, new { htmlAttributes = new { @class = "form-control" , @type = "number", step ="any"} })
                @Html.ValidationMessageFor(model => model.Freight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipName, new { htmlAttributes = new { @class = "form-control", maxlength = "40" } })
                @Html.ValidationMessageFor(model => model.ShipName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipAddress, new { htmlAttributes = new { @class = "form-control", maxlength = "60" } })
                @Html.ValidationMessageFor(model => model.ShipAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipCity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipCity, new { htmlAttributes = new { @class = "form-control", maxlength = "15" } })
                @Html.ValidationMessageFor(model => model.ShipCity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipRegion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipRegion, new { htmlAttributes = new { @class = "form-control", maxlength = "15" } })
                @Html.ValidationMessageFor(model => model.ShipRegion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipPostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipPostalCode, new { htmlAttributes = new { @class = "form-control", maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.ShipPostalCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipCountry, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipCountry, new { htmlAttributes = new { @class = "form-control" , maxlength = "15" } })
                @Html.ValidationMessageFor(model => model.ShipCountry, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="更新訂單" class="btn btn-primary" />
            </div>
        </div>
            <h4>訂單明細</h4>
            <table class="table">
                <tr>
                    <td>刪除</td>
                    <td>商品名稱</td>
                    <td>單價</td>
                    <td>數量</td>
                    <td>小計</td>
                </tr>
                
                @foreach (var od in ViewBag.OrderDetail)
                {
                    productidlist.Add(od.ProductId);
                    var sum = od.UnitPrice * od.Qty;
                    <tr id="@od.ProductId">
                        <td>
                        <button type="button" class="btn btn-danger" onclick="deleteOrderDetail(@od.OrderId , @od.ProductId)" aria-label="Left Align">
                            <span class="glyphicon glyphicon glyphicon-remove" aria-hidden="true"></span>
                        </button></td>

                        <td> @od.ProductName</td>
                        <td><input type="number" value="@od.UnitPrice" id="UnitPrice-@od.ProductId" name="UnitPrice[@od.ProductId]" onchange="updateSum(@od.ProductId)"/></td>
                        <td><input type="number" value="@od.Qty" id="Qty-@od.ProductId" name="Qty[@od.ProductId]" onchange="updateSum(@od.ProductId)"/></td>
                        <td><p id="Sum-@od.ProductId">@sum.ToString("f2")</p></td>
                        
                    </tr>
                    
                }
            </table>
            <input type="button" id="submitOrderDetail" class="btn btn-warning" value="更新訂單明細"/>
            <div id="updateResult"></div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    @{ 
        string jsonlist = Json.Encode(productidlist);
    }
    var productIdList = @jsonlist;
    console.log(GetOrderDetailList());

    function updateSum(productid) {
        console.log("updated");
        var UnitPrice = document.getElementById("UnitPrice-" + productid).value;
        var Qty = document.getElementById("Qty-" + productid).value;
        var result = UnitPrice * Qty;
        document.getElementById("Sum-" + productid).innerHTML = result.toFixed(2);
    }

    $(document).ready(function () {
        $("#submitOrderDetail").click(function () {
            var data = JSON.stringify({ odList: GetOrderDetailList() });
            $.ajax({
                type: "Post",
                data: data,
                url: "@Url.Action("UpdateOrderDetail")",
                dataType: "text",
                contentType: "application/json; charset=UTF-8",
                success: function (result) {
                    $("#updateResult").html(result);
                }

            });
        });
    });
    function deleteOrderDetail(orderid , productid){
        var data = JSON.stringify({ OrderId: orderid , ProductId: productid});
        $.ajax({
            type: "Post",
            data: data,
            url: "@Url.Action("DeleteOrderDetail")",
            dataType: "text",
            contentType: "application/json; charset=UTF-8",
            success: function (result) {
                $( "#"+result ).remove();
            }
        });
        


    }
    function GetOrderDetailList() {
        var orderDetailList = [];
        for (var i = 0; i < productIdList.length; i++) {
            var orderDetail = {};
            orderDetail.OrderId = document.getElementById("OrderId").value;
            orderDetail.ProductId = productIdList[i];
            orderDetail.UnitPrice = document.getElementById("UnitPrice-" + productIdList[i]).value;
            orderDetail.Qty = document.getElementById("Qty-" + productIdList[i]).value;
            orderDetailList[i] = orderDetail;
            console.log(orderDetail);
        }
        return orderDetailList;
    }  
</script>